<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈IM</title>
      <link href="/2024/04/13/IM-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
      <url>/2024/04/13/IM-%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><blockquote><p>在最近的项目中，需要实现一个聊天功能，以我目前的知识体系去实现一个简单的IM</p></blockquote><p>使用的技术栈是 ：WebSocket + Redis + Mysql</p><p>其中，Mysql用来存储所有发送的消息，实现消息持久化。WebSocket可以对在线用户快速转发，Redis用来存储离线消息</p><p><strong>IM本质上就是两件事情，消息的同步和存储：</strong></p><blockquote><p><strong>1）消息的同步：</strong>将消息完整的、快速的从发送方传递到接收方，就是消息的同步。消息同步系统最重要的衡量指标就是消息传递的实时性、完整性以及能支撑的消息规模。从功能上来说，一般至少要支持在线和离线推送，高级的IM系统还支持『多端同步』；<br><strong>2）消息的存储：</strong>消息存储即消息的持久化保存，这里不是指消息在客户端本地的保存，而是指云端的保存，功能上对应的就是『消息漫游』。『消息漫游』的好处是可以实现账号在任意端登陆查看所有历史消息，这也是高级IM系统特有的功能之一。</p></blockquote><h2 id="2、相关文章"><a href="#2、相关文章" class="headerlink" title="2、相关文章"></a>2、相关文章</h2><p><a href="https://zhuanlan.zhihu.com/p/31377253">现代IM系统中聊天消息的同步和存储方案探讨 - 知乎 (zhihu.com)</a></p><p><a href="http://www.52im.net/thread-3887-1-1.html"><strong>浅谈IM系统中离线消息、历史消息的最佳实践</strong></a></p><h2 id="3、消息投递的做法"><a href="#3、消息投递的做法" class="headerlink" title="3、消息投递的做法"></a>3、消息投递的做法</h2><p>在项目中，对于实时消息、离线消息、历史消息大概是这样的技术思路。</p><p><strong>不管是否在线</strong>:消息都会用Mysql存储</p><p><strong>对于在线用户：</strong>消息会使用WebSocket直接实时发送到在线的接收方，消息发送完成后，</p><p><strong>而对于离线的用户：</strong>服务器端会将消息存入到离线库(Redis)，当用户登录后，从离线库中将离线消息拉走，然后服务器端将离线消息删除。</p><h2 id="4、历史消息的保存以及冷热分离"><a href="#4、历史消息的保存以及冷热分离" class="headerlink" title="4、历史消息的保存以及冷热分离"></a>4、历史消息的保存以及冷热分离</h2><p>历史消息存储了用户所有的聊天消息，这些消息包括发出的消息以及接收到的消息。</p><p>使用Mysql保存，前端通过会话分页获取</p><p>超过一定时间(此项目 4个月 根据自己业务设置)的消息数据放入<code>冷库</code>存储</p><p>超过 半年的数据清除并提醒用户</p><h2 id="5、离线消息的保存以及清除"><a href="#5、离线消息的保存以及清除" class="headerlink" title="5、离线消息的保存以及清除"></a>5、离线消息的保存以及清除</h2><p>因为是使用Redis存储的，众所周知Redis一般用来当缓存，比较金贵，所以不存太久</p><p>过了一定时间(7天)(定时任务，每天查一次)后如果用户仍旧未上线，会清除该用户的消息缓存，但设置一个标志位，代表有离线消息，在从数据库里查。</p><h2 id="6、IM离线消息、历史消息在存储逻辑上的区别-扩散写-扩散读"><a href="#6、IM离线消息、历史消息在存储逻辑上的区别-扩散写-扩散读" class="headerlink" title="6、IM离线消息、历史消息在存储逻辑上的区别(扩散写 扩散读)"></a>6、IM离线消息、历史消息在存储逻辑上的区别(扩散写 扩散读)</h2><ul><li><em><strong>1）</strong></em>离线消息我们存储介质选用的是 <a href="https://redis.io/">Redis</a>；</li><li><em><strong>2）</strong></em>历史消息我们选用的是 Mysql;</li></ul><p>对于为什么选用不同的存储介质，其实我们考虑的是离线消息和历史消息不同的业务场景和读写模式。</p><p>下面我们重点介绍一下离线消息和历史消息存储的区别。</p><h3 id="6-1离线消息存储模式——“扩散写”"><a href="#6-1离线消息存储模式——“扩散写”" class="headerlink" title="6.1离线消息存储模式——“扩散写”"></a>6.1离线消息存储模式——“扩散写”</h3><p>离线消息的存储模式我们用的是扩散写。</p><p><img src="http://www.52im.net/data/attachment/forum/202204/18/123123edit9i9s9astwlfq.png" alt="IM开发干货分享：浅谈IM系统中离线消息、历史消息的最佳实践_2.png"></p><p><em>1）</em>扩散写的缺点是：写入会被成指数地放大，特别是针对群这种场景。</p><p>由于我的业务场景只有单聊，所以缺点可以避免</p><h3 id="6-2-历史消息存储模式——“扩散读”"><a href="#6-2-历史消息存储模式——“扩散读”" class="headerlink" title="6.2 历史消息存储模式——“扩散读”"></a>6.2 历史消息存储模式——“扩散读”</h3><p>历史消息的存储模式我们用的是扩散读。</p><p>因为历史消息中，每个会话都保存了整个会话的全量消息。<strong>在扩散读这种模式下，每个会话的消息只保存一次</strong>。</p><p><img src="http://www.52im.net/data/attachment/forum/202204/18/140340fo7uttmu88ulkou4.png" alt="IM开发干货分享：浅谈IM系统中离线消息、历史消息的最佳实践_3.png"></p><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><p>在开发一个即时通讯（IM）系统时，消息的同步和存储是两个重要的方面。最近我在项目中实现了一个简单的聊天功能，使用了WebSocket、Redis和MySQL作为技术栈。</p><p>对于消息的投递，无论用户在线与否，消息都会被存储到MySQL中。对于在线用户，消息会通过WebSocket实时发送到接收方；对于离线用户，消息会被存储到Redis中，等用户登录后再从Redis中获取。历史消息则会被保存在MySQL中，前端可以通过会话分页获取。</p><p>针对历史消息，我们采用了冷热分离的策略，将超过一定时间的消息存入冷库，并定期清除超过半年的数据。对于离线消息，我们设置了一个清除策略，过了一定时间后清除用户的消息缓存，但标记用户有离线消息，并在需要时从数据库中获取。</p><p>在存储逻辑上，离线消息和历史消息采用了不同的存储介质。离线消息使用了Redis，而历史消息使用了MySQL。这是因为离线消息和历史消息的业务场景和读写模式不同。离线消息采用了扩散写的模式，而历史消息采用了扩散读的模式，以更好地满足不同的业务需求。</p><p>综上所述，通过合理选择存储介质和采用不同的存储模式，我们可以有效地实现消息的同步和存储，为IM系统的开发提供了一种可行的方案。</p>]]></content>
      
      
      <categories>
          
          <category> IM, </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
